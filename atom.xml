<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TheValuePoint&#39;s Blog</title>
  
  <subtitle>欢迎来到theValuePoint的博客</subtitle>
  <link href="http://thevaluepoint.github.io/atom.xml" rel="self"/>
  
  <link href="http://thevaluepoint.github.io/"/>
  <updated>2024-10-23T09:19:37.165Z</updated>
  <id>http://thevaluepoint.github.io/</id>
  
  <author>
    <name>theValuePoint</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ML#0.2 Getting Started with pandas</title>
    <link href="http://thevaluepoint.github.io/2024/10/23/ML-0-2-Getting-Started-with-pandas/"/>
    <id>http://thevaluepoint.github.io/2024/10/23/ML-0-2-Getting-Started-with-pandas/</id>
    <published>2024-10-23T09:17:34.000Z</published>
    <updated>2024-10-23T09:19:37.165Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>[!NOTE] 注意<br>本章大篇幅引用<a href="https://wesmckinney.com/book">Pyhon for Data Analysis,Third Edition,Wes McKinney</a>，仅作为学习交流使用。<br><br>本章<strong>默认</strong>进行如下操作：<br><br><code>import numpy as np</code><br><br><code>import pandas as pd</code></p></blockquote><h1>Getting Started with pandas</h1><h2 id="pandas-Data-Structures">pandas Data Structures</h2><h3 id="Series">Series</h3><p>The string representation of a Series displayed interactively<br>shows <strong>the index on the left and the values on the right</strong>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: obj = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: obj</span><br><span class="line">Out[<span class="number">15</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2</span>   -<span class="number">5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: obj.array</span><br><span class="line">Out[<span class="number">16</span>]: </span><br><span class="line">&lt;PandasArray&gt;</span><br><span class="line">[<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">Length: <span class="number">4</span>, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: obj.index</span><br><span class="line">Out[<span class="number">17</span>]: RangeIndex(start=<span class="number">0</span>, stop=<span class="number">4</span>, step=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: obj2 = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>], index=[<span class="string">"d"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"c"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: obj2</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">b    <span class="number">7</span></span><br><span class="line">a   -<span class="number">5</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: obj2.index</span><br><span class="line">Out[<span class="number">20</span>]: Index([<span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字典创建Series</span></span><br><span class="line">In [<span class="number">30</span>]: sdata = {<span class="string">"Ohio"</span>: <span class="number">35000</span>, <span class="string">"Texas"</span>: <span class="number">71000</span>, <span class="string">"Oregon"</span>: <span class="number">16000</span>, <span class="string">"Utah"</span>: <span class="number">5000</span>}</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: obj3 = pd.Series(sdata)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: obj3</span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">Ohio      <span class="number">35000</span></span><br><span class="line">Texas     <span class="number">71000</span></span><br><span class="line">Oregon    <span class="number">16000</span></span><br><span class="line">Utah       <span class="number">5000</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></tbody></table></figure><p>Using NumPy functions or NumPy-like operations,<br>such as filtering with a Boolean array, scalar<br>multiplication, or applying math functions<br>, will preserve the index-value link.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: obj2[obj2 &gt; <span class="number">0</span>]</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">d    <span class="number">6</span></span><br><span class="line">b    <span class="number">7</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: obj2 * <span class="number">2</span></span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">d    <span class="number">12</span></span><br><span class="line">b    <span class="number">14</span></span><br><span class="line">a   -<span class="number">10</span></span><br><span class="line">c     <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: np.exp(obj2)</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">d     <span class="number">403.428793</span></span><br><span class="line">b    <span class="number">1096.633158</span></span><br><span class="line">a       <span class="number">0.006738</span></span><br><span class="line">c      <span class="number">20.085537</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></tbody></table></figure><h3 id="DataFrame">DataFrame</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">data = {<span class="string">"state"</span>: [<span class="string">"Ohio"</span>, <span class="string">"Ohio"</span>, <span class="string">"Ohio"</span>, <span class="string">"Nevada"</span>, <span class="string">"Nevada"</span>, <span class="string">"Nevada"</span>],</span><br><span class="line">        <span class="string">"year"</span>: [<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>],</span><br><span class="line">        <span class="string">"pop"</span>: [<span class="number">1.5</span>, <span class="number">1.7</span>, <span class="number">3.6</span>, <span class="number">2.4</span>, <span class="number">2.9</span>, <span class="number">3.2</span>]}</span><br><span class="line">frame = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: frame</span><br><span class="line">Out[<span class="number">50</span>]: </span><br><span class="line">    state  year  pop</span><br><span class="line"><span class="number">0</span>    Ohio  <span class="number">2000</span>  <span class="number">1.5</span></span><br><span class="line"><span class="number">1</span>    Ohio  <span class="number">2001</span>  <span class="number">1.7</span></span><br><span class="line"><span class="number">2</span>    Ohio  <span class="number">2002</span>  <span class="number">3.6</span></span><br><span class="line"><span class="number">3</span>  Nevada  <span class="number">2001</span>  <span class="number">2.4</span></span><br><span class="line"><span class="number">4</span>  Nevada  <span class="number">2002</span>  <span class="number">2.9</span></span><br><span class="line"><span class="number">5</span>  Nevada  <span class="number">2003</span>  <span class="number">3.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回前五行</span></span><br><span class="line">In [<span class="number">51</span>]: frame.head()</span><br><span class="line">Out[<span class="number">51</span>]: </span><br><span class="line">    state  year  pop</span><br><span class="line"><span class="number">0</span>    Ohio  <span class="number">2000</span>  <span class="number">1.5</span></span><br><span class="line"><span class="number">1</span>    Ohio  <span class="number">2001</span>  <span class="number">1.7</span></span><br><span class="line"><span class="number">2</span>    Ohio  <span class="number">2002</span>  <span class="number">3.6</span></span><br><span class="line"><span class="number">3</span>  Nevada  <span class="number">2001</span>  <span class="number">2.4</span></span><br><span class="line"><span class="number">4</span>  Nevada  <span class="number">2002</span>  <span class="number">2.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回后五行</span></span><br><span class="line">In [<span class="number">52</span>]: frame.tail()</span><br><span class="line">Out[<span class="number">52</span>]: </span><br><span class="line">    state  year  pop</span><br><span class="line"><span class="number">1</span>    Ohio  <span class="number">2001</span>  <span class="number">1.7</span></span><br><span class="line"><span class="number">2</span>    Ohio  <span class="number">2002</span>  <span class="number">3.6</span></span><br><span class="line"><span class="number">3</span>  Nevada  <span class="number">2001</span>  <span class="number">2.4</span></span><br><span class="line"><span class="number">4</span>  Nevada  <span class="number">2002</span>  <span class="number">2.9</span></span><br><span class="line"><span class="number">5</span>  Nevada  <span class="number">2003</span>  <span class="number">3.2</span></span><br></pre></td></tr></tbody></table></figure><p>The <strong>del</strong> keyword will delete columns like with a dictionary.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">68</span>]: frame2[<span class="string">"eastern"</span>] = frame2[<span class="string">"state"</span>] == <span class="string">"Ohio"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: frame2</span><br><span class="line">Out[<span class="number">69</span>]: </span><br><span class="line">   year   state  pop  debt  eastern</span><br><span class="line"><span class="number">0</span>  <span class="number">2000</span>    Ohio  <span class="number">1.5</span>   NaN     <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2001</span>    Ohio  <span class="number">1.7</span>   NaN     <span class="literal">True</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2002</span>    Ohio  <span class="number">3.6</span>  -<span class="number">1.2</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2001</span>  Nevada  <span class="number">2.4</span>   NaN    <span class="literal">False</span></span><br><span class="line"><span class="number">4</span>  <span class="number">2002</span>  Nevada  <span class="number">2.9</span>  -<span class="number">1.5</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">5</span>  <span class="number">2003</span>  Nevada  <span class="number">3.2</span>  -<span class="number">1.7</span>    <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: <span class="keyword">del</span> frame2[<span class="string">"eastern"</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: frame2.columns</span><br><span class="line">Out[<span class="number">71</span>]: Index([<span class="string">'year'</span>, <span class="string">'state'</span>, <span class="string">'pop'</span>, <span class="string">'debt'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></tbody></table></figure><p><a href="https://wesmckinney.com/book/pandas-basics#tbl-table_dataframe_constructor">Possible data inputs to the DataFrame constructor</a></p><table><thead><tr><th>Type</th><th>Notes</th></tr></thead><tbody><tr><td>2D ndarray</td><td>A matrix of data, passing optional row and column labels</td></tr><tr><td>Dictionary of arrays, lists, or tuples</td><td>Each sequence becomes a column in the DataFrame; all sequences must be the same length</td></tr><tr><td>NumPy structured/record array</td><td>Treated as the “dictionary of arrays” case</td></tr><tr><td>Dictionary of Series</td><td>Each value becomes a column; indexes from each Series are unioned together to form the result’s row index if no explicit index is passed</td></tr><tr><td>Dictionary of dictionaries</td><td>Each inner dictionary becomes a column; keys are unioned to form the row index as in the “dictionary of Series” case</td></tr><tr><td>List of dictionaries or Series</td><td>Each item becomes a row in the DataFrame; unions of dictionary keys or Series indexes become the DataFrame’s column labels</td></tr><tr><td>List of lists or tuples</td><td>Treated as the “2D ndarray” case</td></tr><tr><td>Another DataFrame</td><td>The DataFrame’s indexes are used unless different ones are passed</td></tr><tr><td>NumPy MaskedArray</td><td>Like the “2D ndarray” case except masked values are missing in the DataFrame result</td></tr></tbody></table><hr><p><a href="https://wesmckinney.com/book/pandas-basics#tbl-table_index_methods">Some Index methods and properties</a></p><table><thead><tr><th>Method/Property</th><th>Description</th></tr></thead><tbody><tr><td>append()</td><td>Concatenate with additional Index objects, producing a new Index</td></tr><tr><td>difference()</td><td>Compute set difference as an Index</td></tr><tr><td>intersection()</td><td>Compute set intersection</td></tr><tr><td>union()</td><td>Compute set union</td></tr><tr><td>isin()</td><td>Compute Boolean array indicating whether each value is contained in the passed collection</td></tr><tr><td>delete()</td><td>Compute new Index with element at Index i deleted</td></tr><tr><td>drop()</td><td>Compute new Index by deleting passed values</td></tr><tr><td>insert()</td><td>Compute new Index by inserting element at Index i</td></tr><tr><td>is_monotonic</td><td>Returns True if each element is greater than or equal to the previous element</td></tr><tr><td>is_unique</td><td>Returns True if the Index has no duplicate values</td></tr><tr><td>unique()</td><td>Compute the array of unique values in the Index</td></tr></tbody></table><h2 id="Essential-Functionality">Essential Functionality</h2><h3 id="Reindex"><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reindex.html">Reindex</a></h3><h3 id="Dropping-Entries-from-an-Axis">Dropping Entries from an Axis</h3><p><code>DataFrame.drop(labels=None, *, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')</code></p><blockquote><p>Parameters:</p></blockquote><ul><li><p><strong>labels</strong><br><em>single label or list-like</em><br>Index labels to drop.</p></li><li><p><strong>axis</strong><br><em>{0 or ‘index’}</em><br>Unused. Parameter needed for compatibility with DataFrame.</p></li><li><p><strong>index</strong><br><em>single label or list-like</em><br>Redundant for application on Series, but ‘index’ can be used instead of ‘labels’.</p></li><li><p><strong>columns</strong><br><em>single label or list-like</em><br>No change is made to the Series; use ‘index’ or ‘labels’ instead.</p></li><li><p><strong>level</strong><br><em>int or level name, optional</em><br>For MultiIndex, level for which the labels will be removed.</p></li><li><p><strong>inplace</strong><br><em>bool, default False</em><br>If True, do operation inplace and return None.</p></li><li><p><strong>errors</strong><br><em>{‘ignore’, ‘raise’}, default ‘raise’</em><br>If ‘ignore’, suppress error and only existing labels are dropped.</p></li></ul><p><code>Series.drop(labels=None, *, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')</code></p><blockquote><p>Parameters:</p></blockquote><ul><li><p><strong>labels</strong><br><em>array-like, optional</em><br>New labels/index to conform the axis specified by ‘axis’ to.</p></li><li><p><strong>index</strong><br><em>array-like, optional</em><br>New labels for the index. Preferably an Index object to avoid duplicating data.</p></li><li><p><strong>columns</strong><br><em>array-like, optional</em><br>New labels for the columns. Preferably an Index object to avoid duplicating data.</p></li><li><p><strong>axis</strong><br><em>int or str, optional</em><br>Axis to target. Can be either the axis name (‘index’, ‘columns’) or number (0, 1).</p></li><li><p><strong>method</strong><br><em>{None, ‘backfill’/‘bfill’, ‘pad’/‘ffill’, ‘nearest’}</em><br>Method to use for filling holes in reindexed DataFrame.</p><ul><li><strong>None (default)</strong>: Don’t fill gaps.</li><li><strong>pad / ffill</strong>: Propagate last valid observation forward to next valid.</li><li><strong>backfill / bfill</strong>: Use next valid observation to fill gap.</li><li><strong>nearest</strong>: Use nearest valid observations to fill gap.</li></ul></li><li><p><strong>copy</strong><br><em>bool, default True</em><br>Return a new object, even if the passed indexes are the same.</p></li><li><p><strong>level</strong><br><em>int or name</em><br>Broadcast across a level, matching Index values on the passed MultiIndex level.</p></li><li><p><strong>fill_value</strong><br><em>scalar, default np.nan</em><br>Value to use for missing values. Defaults to NaN, but can be any compatible value.</p></li><li><p><strong>limit</strong><br><em>int, default None</em><br>Maximum number of consecutive elements to forward or backward fill.</p></li><li><p><strong>tolerance</strong><br><em>optional</em><br>Maximum distance between original and new labels for inexact matches. Can be scalar or list-like, applying variable tolerance per element.</p></li></ul><h3 id="Indexing-Selection-and-Filtering">Indexing, Selection, and Filtering</h3><p>Since <code>loc</code> operator indexes exclusively with labels, there is also an <code>iloc</code> operator that indexes exclusively with integers to work consistently whether or not the index contains integers.</p><p><a href="https://wesmckinney.com/book/pandas-basics#tbl-table_dataframe_loc_iloc">Indexing options with DataFrame</a></p><h3 id="Arithmetic-and-Data-Alignment">Arithmetic and Data Alignment</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">182</span>]: s1 = pd.Series([<span class="number">7.3</span>, -<span class="number">2.5</span>, <span class="number">3.4</span>, <span class="number">1.5</span>], index=[<span class="string">"a"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">183</span>]: s2 = pd.Series([-<span class="number">2.1</span>, <span class="number">3.6</span>, -<span class="number">1.5</span>, <span class="number">4</span>, <span class="number">3.1</span>],</span><br><span class="line">   .....:                index=[<span class="string">"a"</span>, <span class="string">"c"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">184</span>]: s1</span><br><span class="line">Out[<span class="number">184</span>]: </span><br><span class="line">a    <span class="number">7.3</span></span><br><span class="line">c   -<span class="number">2.5</span></span><br><span class="line">d    <span class="number">3.4</span></span><br><span class="line">e    <span class="number">1.5</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">185</span>]: s2</span><br><span class="line">Out[<span class="number">185</span>]: </span><br><span class="line">a   -<span class="number">2.1</span></span><br><span class="line">c    <span class="number">3.6</span></span><br><span class="line">e   -<span class="number">1.5</span></span><br><span class="line">f    <span class="number">4.0</span></span><br><span class="line">g    <span class="number">3.1</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">186</span>]: s1 + s2</span><br><span class="line">Out[<span class="number">186</span>]: </span><br><span class="line">a    <span class="number">5.2</span></span><br><span class="line">c    <span class="number">1.1</span></span><br><span class="line">d    NaN</span><br><span class="line">e    <span class="number">0.0</span></span><br><span class="line">f    NaN</span><br><span class="line">g    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">187</span>]: df1 = pd.DataFrame(np.arange(<span class="number">9.</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)), columns=<span class="built_in">list</span>(<span class="string">"bcd"</span>),</span><br><span class="line">   .....:                    index=[<span class="string">"Ohio"</span>, <span class="string">"Texas"</span>, <span class="string">"Colorado"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">188</span>]: df2 = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">4</span>, <span class="number">3</span>)), columns=<span class="built_in">list</span>(<span class="string">"bde"</span>),</span><br><span class="line">   .....:                    index=[<span class="string">"Utah"</span>, <span class="string">"Ohio"</span>, <span class="string">"Texas"</span>, <span class="string">"Oregon"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">189</span>]: df1</span><br><span class="line">Out[<span class="number">189</span>]: </span><br><span class="line">            b    c    d</span><br><span class="line">Ohio      <span class="number">0.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span></span><br><span class="line">Texas     <span class="number">3.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line">Colorado  <span class="number">6.0</span>  <span class="number">7.0</span>  <span class="number">8.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">190</span>]: df2</span><br><span class="line">Out[<span class="number">190</span>]: </span><br><span class="line">          b     d     e</span><br><span class="line">Utah    <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span></span><br><span class="line">Ohio    <span class="number">3.0</span>   <span class="number">4.0</span>   <span class="number">5.0</span></span><br><span class="line">Texas   <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span></span><br><span class="line">Oregon  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">191</span>]: df1 + df2</span><br><span class="line">Out[<span class="number">191</span>]: </span><br><span class="line">            b   c     d   e</span><br><span class="line">Colorado  NaN NaN   NaN NaN</span><br><span class="line">Ohio      <span class="number">3.0</span> NaN   <span class="number">6.0</span> NaN</span><br><span class="line">Oregon    NaN NaN   NaN NaN</span><br><span class="line">Texas     <span class="number">9.0</span> NaN  <span class="number">12.0</span> NaN</span><br><span class="line">Utah      NaN NaN   NaN NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">192</span>]: df1 = pd.DataFrame({<span class="string">"A"</span>: [<span class="number">1</span>, <span class="number">2</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">193</span>]: df2 = pd.DataFrame({<span class="string">"B"</span>: [<span class="number">3</span>, <span class="number">4</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">194</span>]: df1</span><br><span class="line">Out[<span class="number">194</span>]: </span><br><span class="line">   A</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">195</span>]: df2</span><br><span class="line">Out[<span class="number">195</span>]: </span><br><span class="line">   B</span><br><span class="line"><span class="number">0</span>  <span class="number">3</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">196</span>]: df1 + df2</span><br><span class="line">Out[<span class="number">196</span>]: </span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span> NaN NaN</span><br><span class="line"><span class="number">1</span> NaN NaN</span><br><span class="line"></span><br><span class="line">In [<span class="number">197</span>]: df1 = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">3</span>, <span class="number">4</span>)),</span><br><span class="line">   .....:                    columns=<span class="built_in">list</span>(<span class="string">"abcd"</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">198</span>]: df2 = pd.DataFrame(np.arange(<span class="number">20.</span>).reshape((<span class="number">4</span>, <span class="number">5</span>)),</span><br><span class="line">   .....:                    columns=<span class="built_in">list</span>(<span class="string">"abcde"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here is an example where we set a particular value to NA (null) by assigning np.nan to it</span></span><br><span class="line">In [<span class="number">199</span>]: df2.loc[<span class="number">1</span>, <span class="string">"b"</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="number">200</span>]: df1</span><br><span class="line">Out[<span class="number">200</span>]: </span><br><span class="line">     a    b     c     d</span><br><span class="line"><span class="number">0</span>  <span class="number">0.0</span>  <span class="number">1.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4.0</span>  <span class="number">5.0</span>   <span class="number">6.0</span>   <span class="number">7.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">8.0</span>  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Adding these results in missing values in the locations that don’t overlap</span></span><br><span class="line">In [<span class="number">201</span>]: df2</span><br><span class="line">Out[<span class="number">201</span>]: </span><br><span class="line">      a     b     c     d     e</span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span>   <span class="number">4.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">5.0</span>   NaN   <span class="number">7.0</span>   <span class="number">8.0</span>   <span class="number">9.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">10.0</span>  <span class="number">11.0</span>  <span class="number">12.0</span>  <span class="number">13.0</span>  <span class="number">14.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">15.0</span>  <span class="number">16.0</span>  <span class="number">17.0</span>  <span class="number">18.0</span>  <span class="number">19.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">202</span>]: df1 + df2</span><br><span class="line">Out[<span class="number">202</span>]: </span><br><span class="line">      a     b     c     d   e</span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">2.0</span>   <span class="number">4.0</span>   <span class="number">6.0</span> NaN</span><br><span class="line"><span class="number">1</span>   <span class="number">9.0</span>   NaN  <span class="number">13.0</span>  <span class="number">15.0</span> NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">18.0</span>  <span class="number">20.0</span>  <span class="number">22.0</span>  <span class="number">24.0</span> NaN</span><br><span class="line"><span class="number">3</span>   NaN   NaN   NaN   NaN NaN</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>add</code>, <code>radd</code></td><td>Methods for addition (+)</td></tr><tr><td><code>sub</code>, <code>rsub</code></td><td>Methods for subtraction (-)</td></tr><tr><td><code>div</code>, <code>rdiv</code></td><td>Methods for division (/)</td></tr><tr><td><code>floordiv</code>, <code>rfloordiv</code></td><td>Methods for floor division (//)</td></tr><tr><td><code>mul</code>, <code>rmul</code></td><td>Methods for multiplication (*)</td></tr><tr><td><code>pow</code>, <code>rpow</code></td><td>Methods for exponentiation (**)</td></tr></tbody></table><h3 id="Sorting-and-Ranking">Sorting and Ranking</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To sort lexicographically by row or column label, use the sort_index method, which returns a new, sorted object</span></span><br><span class="line">In [<span class="number">234</span>]: obj = pd.Series(np.arange(<span class="number">4</span>), index=[<span class="string">"d"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">235</span>]: obj</span><br><span class="line">Out[<span class="number">235</span>]: </span><br><span class="line">d    <span class="number">0</span></span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">236</span>]: obj.sort_index()</span><br><span class="line">Out[<span class="number">236</span>]: </span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">0</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="comment"># With a DataFrame, you can sort by index on either axis</span></span><br><span class="line">In [<span class="number">237</span>]: frame = pd.DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">2</span>, <span class="number">4</span>)),</span><br><span class="line">   .....:                      index=[<span class="string">"three"</span>, <span class="string">"one"</span>],</span><br><span class="line">   .....:                      columns=[<span class="string">"d"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">238</span>]: frame</span><br><span class="line">Out[<span class="number">238</span>]: </span><br><span class="line">       d  a  b  c</span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">239</span>]: frame.sort_index()</span><br><span class="line">Out[<span class="number">239</span>]: </span><br><span class="line">       d  a  b  c</span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">240</span>]: frame.sort_index(axis=<span class="string">"columns"</span>)</span><br><span class="line">Out[<span class="number">240</span>]: </span><br><span class="line">       a  b  c  d</span><br><span class="line">three  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">0</span></span><br><span class="line">one    <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The data is sorted in ascending order by default but can be sorted in descending order, too.</span></span><br><span class="line">In [<span class="number">241</span>]: frame.sort_index(axis=<span class="string">"columns"</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">Out[<span class="number">241</span>]: </span><br><span class="line">       d  c  b  a</span><br><span class="line">three  <span class="number">0</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line">one    <span class="number">4</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">242</span>]: obj = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># To sort a Series by its values, use its sort_values method</span></span><br><span class="line">In [<span class="number">243</span>]: obj.sort_values()</span><br><span class="line">Out[<span class="number">243</span>]: </span><br><span class="line"><span class="number">2</span>   -<span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">244</span>]: obj = pd.Series([<span class="number">4</span>, np.nan, <span class="number">7</span>, np.nan, -<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">245</span>]: obj.sort_values()</span><br><span class="line">Out[<span class="number">245</span>]: </span><br><span class="line"><span class="number">4</span>   -<span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">1</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Missing values can be sorted to the start instead by using the na_position option.</span></span><br><span class="line">In [<span class="number">246</span>]: obj.sort_values(na_position=<span class="string">"first"</span>)</span><br><span class="line">Out[<span class="number">246</span>]: </span><br><span class="line"><span class="number">1</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>   -<span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">247</span>]: frame = pd.DataFrame({<span class="string">"b"</span>: [<span class="number">4</span>, <span class="number">7</span>, -<span class="number">3</span>, <span class="number">2</span>], <span class="string">"a"</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">248</span>]: frame</span><br><span class="line">Out[<span class="number">248</span>]: </span><br><span class="line">   b  a</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">1</span></span><br><span class="line"><span class="number">2</span> -<span class="number">3</span>  <span class="number">0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">249</span>]: frame.sort_values(<span class="string">"b"</span>)</span><br><span class="line">Out[<span class="number">249</span>]: </span><br><span class="line">   b  a</span><br><span class="line"><span class="number">2</span> -<span class="number">3</span>  <span class="number">0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">250</span>]: frame.sort_values([<span class="string">"a"</span>, <span class="string">"b"</span>])</span><br><span class="line">Out[<span class="number">250</span>]: </span><br><span class="line">   b  a</span><br><span class="line"><span class="number">2</span> -<span class="number">3</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">251</span>]: obj = pd.Series([<span class="number">7</span>, -<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">252</span>]: obj.rank()</span><br><span class="line">Out[<span class="number">252</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">6.5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6.5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.5</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4.5</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">253</span>]: obj.rank(method=<span class="string">"first"</span>)</span><br><span class="line">Out[<span class="number">253</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">5.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">254</span>]: obj.rank(ascending=<span class="literal">False</span>)</span><br><span class="line">Out[<span class="number">254</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">1.5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1.5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3.5</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">3.5</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">255</span>]: frame = pd.DataFrame({<span class="string">"b"</span>: [<span class="number">4.3</span>, <span class="number">7</span>, -<span class="number">3</span>, <span class="number">2</span>], <span class="string">"a"</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">   .....:                       <span class="string">"c"</span>: [-<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, -<span class="number">2.5</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">256</span>]: frame</span><br><span class="line">Out[<span class="number">256</span>]: </span><br><span class="line">     b  a    c</span><br><span class="line"><span class="number">0</span>  <span class="number">4.3</span>  <span class="number">0</span> -<span class="number">2.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7.0</span>  <span class="number">1</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span> -<span class="number">3.0</span>  <span class="number">0</span>  <span class="number">8.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2.0</span>  <span class="number">1</span> -<span class="number">2.5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">257</span>]: frame.rank(axis=<span class="string">"columns"</span>)</span><br><span class="line">Out[<span class="number">257</span>]: </span><br><span class="line">     b    a    c</span><br><span class="line"><span class="number">0</span>  <span class="number">3.0</span>  <span class="number">2.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">3.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3.0</span>  <span class="number">2.0</span>  <span class="number">1.0</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://wesmckinney.com/book/pandas-basics#tbl-table_pandas_rank">Table: Tie-breaking methods with rank</a></p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>"average"</code></td><td>Default: assign the average rank to each entry in the equal group</td></tr><tr><td><code>"min"</code></td><td>Use the minimum rank for the whole group</td></tr><tr><td><code>"max"</code></td><td>Use the maximum rank for the whole group</td></tr><tr><td><code>"first"</code></td><td>Assign ranks in the order the values appear in the data</td></tr><tr><td><code>"dense"</code></td><td>Like method=“min”, but ranks always increase by 1 between groups rather than the number of equal elements in a group</td></tr></tbody></table><h2 id="Summarizing-and-Computing-Descriptive-Statistics">Summarizing and Computing Descriptive Statistics</h2><p><a href="https://wesmckinney.com/book/pandas-basics#tbl-table_descriptive_stats">Table:Descriptive and summary statistics</a></p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>count</code></td><td>Number of non-NA values</td></tr><tr><td><code>describe</code></td><td>Compute set of summary statistics</td></tr><tr><td><code>min</code>, <code>max</code></td><td>Compute minimum and maximum values</td></tr><tr><td><code>argmin</code>, <code>argmax</code></td><td>Compute index locations (integers) at which minimum or maximum value is obtained; not available on DataFrame objects</td></tr><tr><td><code>idxmin</code>, <code>idxmax</code></td><td>Compute index labels at which minimum or maximum value is obtained</td></tr><tr><td><code>quantile</code></td><td>Compute sample quantile ranging from 0 to 1 (default: 0.5)</td></tr><tr><td><code>sum</code></td><td>Sum of values</td></tr><tr><td><code>mean</code></td><td>Mean of values</td></tr><tr><td><code>median</code></td><td>Arithmetic median (50% quantile) of values</td></tr><tr><td><code>mad</code></td><td>Mean absolute deviation from mean value</td></tr><tr><td><code>prod</code></td><td>Product of all values</td></tr><tr><td><code>var</code></td><td>Sample variance of values</td></tr><tr><td><code>std</code></td><td>Sample standard deviation of values</td></tr><tr><td><code>skew</code></td><td>Sample skewness (third moment) of values</td></tr><tr><td><code>kurt</code></td><td>Sample kurtosis (fourth moment) of values</td></tr><tr><td><code>cumsum</code></td><td>Cumulative sum of values</td></tr><tr><td><code>cummin</code>, <code>cummax</code></td><td>Cumulative minimum or maximum of values, respectively</td></tr><tr><td><code>cumprod</code></td><td>Cumulative product of values</td></tr><tr><td><code>diff</code></td><td>Compute first arithmetic difference (useful for time series)</td></tr><tr><td><code>pct_change</code></td><td>Compute percent changes</td></tr></tbody></table><p><a href="https://wesmckinney.com/book/pandas-basics#tbl-table_pandas_reduction">Table: Options for reduction methods</a></p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>axis</code></td><td>Axis to reduce over; “index” for DataFrame’s rows and “columns” for columns</td></tr><tr><td><code>skipna</code></td><td>Exclude missing values; True by default</td></tr><tr><td><code>level</code></td><td>Reduce grouped by level if the axis is hierarchically indexed (MultiIndex)</td></tr></tbody></table><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Machine Learning Notes" scheme="http://thevaluepoint.github.io/categories/Machine-Learning-Notes/"/>
    
    
    <category term="Python" scheme="http://thevaluepoint.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ML#0.1 NumPy Basics Arrays and Vectorized Computation</title>
    <link href="http://thevaluepoint.github.io/2024/10/18/ML-0-1-NumPy-Basics-Arrays-and-Vectorized-Computation/"/>
    <id>http://thevaluepoint.github.io/2024/10/18/ML-0-1-NumPy-Basics-Arrays-and-Vectorized-Computation/</id>
    <published>2024-10-18T14:57:11.000Z</published>
    <updated>2024-10-18T16:51:37.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>[!NOTE] 注意<br>本章大篇幅引用<a href="https://wesmckinney.com/book">Pyhon for Data Analysis,Third Edition,Wes McKinney</a>，仅作为学习交流使用。<br><br>本章<strong>默认</strong>进行如下操作：<br><br><code>import numpy as np</code><br><br><code>import pandas as pd</code></p></blockquote><h1>NumPy Basics: Arrays and Vectorized Computation</h1><blockquote><p><strong>NumPy</strong>, short for Numerical Python, is one of the most important foundational packages for numerical computing in Python.</p></blockquote><h2 id="The-NumPy-ndarray-A-Multidimensional-Array-Object">The NumPy ndarray: A Multidimensional Array Object</h2><p>Creating ndarrays:<code>arr1 = np.array(data1)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: data2 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: arr2 = np.array(data2)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: arr2</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: arr2.ndim <span class="comment"># 查看数组维度</span></span><br><span class="line">Out[<span class="number">25</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: arr2.shape <span class="comment"># 查看数组形状</span></span><br><span class="line">Out[<span class="number">26</span>]: (<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><p>0s,1s,Trues:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>)</span><br><span class="line">np.empty((<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">np.full((<span class="number">3</span>, <span class="number">3</span>), <span class="literal">True</span>, dtype=<span class="built_in">bool</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Data-Types-for-ndarrays">Data Types for ndarrays</h2><p><a href="https://wesmckinney.com/book/numpy-basics#tbl-table_array_dtypes">Numpy的数据类型链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float64)</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: arr2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: arr1.dtype</span><br><span class="line">Out[<span class="number">35</span>]: dtype(<span class="string">'float64'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: arr2.dtype</span><br><span class="line">Out[<span class="number">36</span>]: dtype(<span class="string">'int32'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: arr.dtype</span><br><span class="line">Out[<span class="number">38</span>]: dtype(<span class="string">'int64'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: float_arr = arr.astype(np.float64) <span class="comment"># 转换另一种数据类型</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: float_arr</span><br><span class="line">Out[<span class="number">40</span>]: array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>, <span class="number">5.</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: float_arr.dtype</span><br><span class="line">Out[<span class="number">41</span>]: dtype(<span class="string">'float64'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Indexing-and-Slicing">Indexing and Slicing</h2><h3 id="Boolean-Indexing">Boolean Indexing</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">100</span>]: names = np.array([<span class="string">"Bob"</span>, <span class="string">"Joe"</span>, <span class="string">"Will"</span>, <span class="string">"Bob"</span>, <span class="string">"Will"</span>, <span class="string">"Joe"</span>, <span class="string">"Joe"</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: data = np.array([[<span class="number">4</span>, <span class="number">7</span>], [<span class="number">0</span>, <span class="number">2</span>], [-<span class="number">5</span>, <span class="number">6</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">   .....:                  [-<span class="number">12</span>, -<span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: names</span><br><span class="line">Out[<span class="number">102</span>]: array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>, <span class="string">'Bob'</span>, <span class="string">'Will'</span>, <span class="string">'Joe'</span>, <span class="string">'Joe'</span>], dtype=<span class="string">'&lt;U4'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: data</span><br><span class="line">Out[<span class="number">103</span>]: </span><br><span class="line">array([[  <span class="number">4</span>,   <span class="number">7</span>],</span><br><span class="line">       [  <span class="number">0</span>,   <span class="number">2</span>],</span><br><span class="line">       [ -<span class="number">5</span>,   <span class="number">6</span>],</span><br><span class="line">       [  <span class="number">0</span>,   <span class="number">0</span>],</span><br><span class="line">       [  <span class="number">1</span>,   <span class="number">2</span>],</span><br><span class="line">       [-<span class="number">12</span>,  -<span class="number">4</span>],</span><br><span class="line">       [  <span class="number">3</span>,   <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Boolean Array</span></span><br><span class="line">In [<span class="number">104</span>]: names == <span class="string">"Bob"</span></span><br><span class="line">Out[<span class="number">104</span>]: array([ <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>,  <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: data[names == <span class="string">"Bob"</span>]</span><br><span class="line">Out[<span class="number">105</span>]: </span><br><span class="line">array([[<span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: data[names == <span class="string">"Bob"</span>, <span class="number">1</span>:]</span><br><span class="line">Out[<span class="number">106</span>]: </span><br><span class="line">array([[<span class="number">7</span>],</span><br><span class="line">       [<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: data[names == <span class="string">"Bob"</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">107</span>]: array([<span class="number">7</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: cond = names == <span class="string">"Bob"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The ~ operator can be useful when you want to invert a Boolean array referenced by a variable</span></span><br><span class="line">In [<span class="number">112</span>]: data[~cond]</span><br><span class="line">Out[<span class="number">112</span>]: </span><br><span class="line">array([[  <span class="number">0</span>,   <span class="number">2</span>],</span><br><span class="line">       [ -<span class="number">5</span>,   <span class="number">6</span>],</span><br><span class="line">       [  <span class="number">1</span>,   <span class="number">2</span>],</span><br><span class="line">       [-<span class="number">12</span>,  -<span class="number">4</span>],</span><br><span class="line">       [  <span class="number">3</span>,   <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># To select two of the three names to combine multiple Boolean conditions, use Boolean arithmetic operators like &amp; (and) and | (or)</span></span><br><span class="line">In [<span class="number">113</span>]: mask = (names == <span class="string">"Bob"</span>) | (names == <span class="string">"Will"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: mask</span><br><span class="line">Out[<span class="number">114</span>]: array([ <span class="literal">True</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: data[mask]</span><br><span class="line">Out[<span class="number">115</span>]: </span><br><span class="line">array([[ <span class="number">4</span>,  <span class="number">7</span>],</span><br><span class="line">       [-<span class="number">5</span>,  <span class="number">6</span>],</span><br><span class="line">       [ <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">2</span>]])</span><br></pre></td></tr></tbody></table></figure><h3 id="Fancy-Indexing">Fancy Indexing</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">120</span>]: arr = np.zeros((<span class="number">8</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">   .....:     arr[i] = i</span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: arr</span><br><span class="line">Out[<span class="number">122</span>]: </span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">       [<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">       [<span class="number">5.</span>, <span class="number">5.</span>, <span class="number">5.</span>, <span class="number">5.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">       [<span class="number">7.</span>, <span class="number">7.</span>, <span class="number">7.</span>, <span class="number">7.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">123</span>]: arr[[<span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>]]</span><br><span class="line">Out[<span class="number">123</span>]: </span><br><span class="line">array([[<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">       [<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#  Using negative indices selects rows from the end</span></span><br><span class="line">In [<span class="number">124</span>]: arr[[-<span class="number">3</span>, -<span class="number">5</span>, -<span class="number">7</span>]]</span><br><span class="line">Out[<span class="number">124</span>]: </span><br><span class="line">array([[<span class="number">5.</span>, <span class="number">5.</span>, <span class="number">5.</span>, <span class="number">5.</span>],</span><br><span class="line">       [<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></tbody></table></figure><h2 id="Pseudorandom-Number-Generation">Pseudorandom Number Generation</h2><p>引用自:<a href="https://wesmckinney.com/book/numpy-basics#tbl-table_numpy_random">NumPy random number generator methods</a></p><p>Numpy.Random API reference:<a href="https://numpy.org/doc/stable/reference/random/index.html">https://numpy.org/doc/stable/reference/random/index.html</a></p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>permutation</td><td>Return a random permutation of a sequence, or return a permuted range</td></tr><tr><td>shuffle</td><td>Randomly permute a sequence in place</td></tr><tr><td>uniform</td><td>Draw samples from a uniform distribution</td></tr><tr><td>integers</td><td>Draw random integers from a given low-to-high range</td></tr><tr><td>standard_normal</td><td>Draw samples from a normal distribution with mean 0 and standard deviation 1</td></tr><tr><td>binomial</td><td>Draw samples from a binomial distribution</td></tr><tr><td>normal</td><td>Draw samples from a normal (Gaussian) distribution</td></tr><tr><td>beta</td><td>Draw samples from a beta distribution</td></tr><tr><td>chisquare</td><td>Draw samples from a chi-square distribution</td></tr><tr><td>gamma</td><td>Draw samples from a gamma distribution</td></tr><tr><td>uniform</td><td>Draw samples from a uniform [0, 1) distribution</td></tr></tbody></table><h2 id="Universal-Functions">Universal Functions</h2><p>Numpy API reference:<a href="https://numpy.org/doc/stable/reference/ufuncs.html">https://numpy.org/doc/stable/reference/ufuncs.html</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Machine Learning Notes" scheme="http://thevaluepoint.github.io/categories/Machine-Learning-Notes/"/>
    
    
    <category term="Python" scheme="http://thevaluepoint.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>My_First_Blog</title>
    <link href="http://thevaluepoint.github.io/2024/09/25/My-First-Blog/"/>
    <id>http://thevaluepoint.github.io/2024/09/25/My-First-Blog/</id>
    <published>2024-09-25T09:51:44.000Z</published>
    <updated>2024-09-25T09:54:43.085Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>这是我的第一条Blog！！！</h1><p>话说换硬盘真是麻烦。再加上我还只是个小白（悲），所以只能重新再来一遍。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Daily" scheme="http://thevaluepoint.github.io/tags/Daily/"/>
    
  </entry>
  
</feed>
